@using Common.Client
@using Common.Shared
@using Common.Shared.Auth
@using Newtonsoft.Json
@using ApiCounter = Api.Counter.Counter
@using IApi = Ytc.Api.IApi
@using S = Ytc.I18n.S

<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25 flx col ai-stretch g-1">
        <RadzenText TextStyle="TextStyle.H1" TagName="TagName.H2" class="val m-t-0 txt-c f-b">
            @L.I((int)ApiCounter.Value)
        </RadzenText>    
        @if (Session.Id == User)
        {
            <RadzenButton class="increment" ButtonStyle="ButtonStyle.Info" ButtonType="ButtonType.Button" BusyText="@L.S(S.Incrementing)" IsBusy="_incrementing" Text="@L.S(S.Increment)" Disabled="!CanIncrement" Click="Increment"/>
            <RadzenButton class="decrement" ButtonStyle="ButtonStyle.Warning" ButtonType="ButtonType.Button" BusyText="@L.S(S.Decrementing)" IsBusy="_decrementing" Text="@L.S(S.Decrement)" Disabled="!CanDecrement" Click="Decrement"/>
        }
    </RadzenCard>
</div>

@inject L L;
@inject IApi Api;
@inject IAuthService Auth;
@implements IAsyncDisposable;
@code{

    private bool _incrementing = false;
    private bool _decrementing = false;
    private bool DoingSomething => _incrementing || _decrementing;
    private bool CanIncrement => ApiCounter.Value < uint.MaxValue && !DoingSomething;
    private bool CanDecrement => ApiCounter.Value > uint.MinValue && !DoingSomething;
    
    [CascadingParameter]
    public ISession Session { get; set; } = Common.Shared.Auth.Session.CommonDefault();

    [Parameter]
    [EditorRequired]
    public string User { get; set; } = "";

    private string _prevUser = "";

    private ApiCounter ApiCounter { get; set; } = new ("", 0);
    
    public async ValueTask DisposeAsync()
    {
        await Auth.FcmUnregister();
    }

    protected override async Task OnAfterRenderAsync(bool isFirst)
    {
        if (User != _prevUser)
        {
            _prevUser = User;
            await Auth.FcmRegister(new() { User }, FcmHandler);
            ApiCounter = await Api.Counter.Get(new(User));
            StateHasChanged();
        }
    }

    private async void Increment()
    {
        _incrementing = true;
        try
        {
            ApiCounter = await Api.Counter.Increment();
        }
        finally
        {
            _incrementing = false;
            StateHasChanged();
        }
    }
    
    private async void Decrement()
    {
        _decrementing = true;
        try
        {
            ApiCounter = await Api.Counter.Decrement();
        }
        finally
        {
            _decrementing = false;
            StateHasChanged();
        }
    }

    private void FcmHandler(string data)
    {
        ApiCounter = JsonConvert.DeserializeObject<Ytc.Api.Counter.Counter>(data).NotNull();
        Console.WriteLine(data);
        StateHasChanged();
    }
}