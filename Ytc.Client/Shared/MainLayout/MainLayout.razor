<div class="root col">
    <CascadingValue Value="@_session">
        <DemoBanner/>
        <RadzenLayout class="rz-shadow-3 grow-1">
                <AppHeader @bind-LeftExpanded="_leftExpanded"/>
                <RadzenSidebar @bind-Expanded="@_leftExpanded">
                    <RadzenPanelMenu>
                        <RadzenPanelMenuItem class="goto-home" Text="@L.S(S.Home)" Icon="home" Path="/" Click="CollapseIfNarrow"/>
                        @if (_session.IsAuthed)
                        {
                            <RadzenPanelMenuItem class="goto-my-counter" Text="@L.S(S.Counter)" Icon="star" Path="@($"/{_session.Id}/counter")" Click="CollapseIfNarrow"/>
                        }
                    </RadzenPanelMenu>
                </RadzenSidebar>
                <RadzenBody class="root">
                    @if (_ready)
                    {
                        @Body
                    }
                    else
                    {
                        <p class="m-1">@L.S(CS.LoadingSession)</p>
                    }
                </RadzenBody>
                <RadzenComponents/>
        </RadzenLayout>
    </CascadingValue>
</div>
@using Common.Client.Layout
@using Common.Shared.Auth
@using S = Ytc.I18n.S
@using CS = Common.Shared.I18n.S
@inherits LayoutComponentBase
@inject IAuthService Auth;
@inject L L;
@inject IJSRuntime Js;
@code{

    private bool _leftExpanded;
    private ISession _session = Session.CommonDefault();
    private bool _ready;
    protected override async Task OnInitializedAsync()
    {
        Auth.OnSessionChanged(OnSessionChanged);
        OnSessionChanged(await Auth.GetSession());
        _ready = true;
    }

    private void OnSessionChanged(ISession s)
    {
        _session = s;
        InvokeAsync(StateHasChanged).Wait();
    }

    private async Task CollapseIfNarrow(MouseEventArgs args)
    {
        var width = await Js.InvokeAsync<decimal>("getWidth");
        if(width < 50)
            _leftExpanded = false;
    }

}